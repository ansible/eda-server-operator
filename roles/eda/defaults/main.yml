---
# defaults file for EDA

deployment_type: eda
kind: 'EDA'
api_version: '{{ deployment_type }}.ansible.com/v1alpha1'

no_log: true

image_pull_policy: IfNotPresent
image_pull_secrets: []

_image: quay.io/ansible/eda-server
_image_version: main
_image_version: "{{ lookup('env', 'DEFAULT_EDA_VERSION') or 'main' }}"

_image_web: quay.io/ansible/eda-ui
_image_web_version: "{{ lookup('env', 'DEFAULT_EDA_UI_VERSION') or 'main' }}"

# Add a nodeSelector for the EDA pods. It must match a node's labels for the pod
# to be scheduled on that node. Specify as literal block. E.g.:
# api:
#   node_selector: |
#     disktype: ssd
#     kubernetes.io/arch: amd64
#     kubernetes.io/os: linux

websocket_ssl_verify: false

api: {}
_api:
  gunicorn_workers: 2
  replicas: 1
  resource_requirements:
    requests:
      cpu: 50m
      memory: 350Mi
  node_selector: ''
  tolerations: ''

# Note: "default-worker: {}" is intentionally excluded here so we know if the user set it
_default_worker:
  replicas: 2
  resource_requirements:
    requests:
      cpu: 25m
      memory: 130Mi
  node_selector: ''
  tolerations: ''

# Note: "activation-worker: {}" is intentionally excluded here so we know if the user set it
_activation_worker:
  replicas: 2
  resource_requirements:
    requests:
      cpu: 25m
      memory: 150Mi
  node_selector: ''
  tolerations: ''

# Note: Deprecated "worker: {}" is intentionally excluded here so we know if the user set it
_worker:
  replicas: 2
  resource_requirements:
    requests:
      cpu: 25m
      memory: 130Mi
  node_selector: ''
  tolerations: ''

scheduler: {}
_scheduler:
  replicas: 2
  resource_requirements:
    requests:
      cpu: 50m
      memory: 256Mi
  node_selector: ''
  tolerations: ''

ui: {}
_ui:
  replicas: 1
  resource_requirements:
    requests:
      cpu: 25m
      memory: 64Mi
  node_selector: ''
  tolerations: ''

# Labels defined on the resource, which should be propagated to child resources
additional_labels: []


service_type: ClusterIP
ingress_type: none
ingress_class_name: ''
ingress_path: '/'
ingress_path_type: 'Prefix'
ingress_api_version: 'networking.k8s.io/v1'
# Add annotations to the service account. Specify as literal block. E.g.:
# service_account_annotations: |
#   eks.amazonaws.com/role-arn: arn:aws:iam::<ACCOUNT_ID>:role/<IAM_ROLE_NAME>
service_account_annotations: ''

# Custom labels for the eda service. Specify as literal block. E.g.:
# service_labels: |
#   environment: non-production
#   zone: internal
service_labels: ''

# Add annotations to the ingress. Specify as literal block. E.g.:
# ingress_annotations: |
#   kubernetes.io/ingress.class: nginx
#   nginx.ingress.kubernetes.io/proxy-connect-timeout: 60s
ingress_annotations: ''

# TLS secret for the ingress. The secret either has to exist before hand with
# the corresponding cert and key or just be an indicator for where an automated
# process like cert-manager (enabled via annotations) will store the TLS
# certificate and key.
ingress_tls_secret: ''

loadbalancer_protocol: 'http'
loadbalancer_port: '80'
service_annotations: ''

# Port to be used for NodePort configuration, default is to auto-assign a port between 30000-32768
#nodeport_port: '30080'

# The TLS termination mechanism to use to access
# the services. Supported mechanism are: edge, passthrough
#
route_tls_termination_mechanism: edge

# Secret to lookup that provide the TLS specific
# credentials to deploy
#
route_tls_secret: ''

# Route API Version to support older version
# of the kubernetes services
route_api_version: 'route.openshift.io/v1'

# Host to create the root with.
# If not specific will default to <instance-name>-<namespace>-<routerCanonicalHostname>
#
route_host: ''

hostname: ''

# Secret to lookup that provides the custom CA trusted bundle
bundle_cacert_secret: ''

# Secret to lookup that provide the secret key
# #
db_fields_encryption_secret: ''

admin_user: admin
admin_email: test@example.com
admin_password_secret: ''

# Disable UI container's nginx ipv6 listener
ipv6_disabled: false
