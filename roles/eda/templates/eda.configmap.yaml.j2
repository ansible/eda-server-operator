# EDA ConfigMap.
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: '{{ ansible_operator_meta.name }}-{{ deployment_type }}-env-properties'
  namespace: '{{ ansible_operator_meta.namespace }}'
  labels:
    {{ lookup("template", "../common/templates/labels/common.yaml.j2") | indent(width=4) | trim }}
data:
  # Operator specific settings
  EDA_DEPLOYMENT_TYPE: "k8s"

  {% if public_base_url and eda_event_stream_prefix_path %}
  # Public URL
  EDA_WEBHOOK_BASE_URL: "{{ public_base_url.rstrip('/') }}/{{ eda_event_stream_prefix_path.lstrip('/') }}"
  EDA_WEBHOOK_MTLS_BASE_URL: "@none None"
  EDA_EVENT_STREAM_BASE_URL: "{{ public_base_url.rstrip('/') }}/{{ eda_event_stream_prefix_path.lstrip('/') }}"
  EDA_EVENT_STREAM_MTLS_BASE_URL: "@none None"
  {% endif %}

  # EDA Server
  EDA_CONTROLLER_URL: "{{ automation_server_url }}"
  EDA_CONTROLLER_SSL_VERIFY: "{{ automation_server_ssl_verify | default('yes')}}"

  # EDA Server
  EDA_ALLOWED_HOSTS: "['*']"
  EDA_CSRF_TRUSTED_ORIGINS: "http://{{ api_server_name }}:{{ api_nginx_port }}"
  EDA_WEBSOCKET_BASE_URL: "ws://{{ websocket_server_name }}:{{ websocket_port }}"
  EDA_WEBSOCKET_TOKEN_BASE_URL: "http://{{ api_server_name }}:{{ api_nginx_port }}"
  EDA_WEBSOCKET_SSL_VERIFY: "{{ websocket_ssl_verify }}"
  EDA_MAX_RUNNING_ACTIVATIONS: "12"

  EDA_STATIC_URL: /api/eda/static/

  # Custom user variables
{% for item in extra_settings | default([]) %}
  {{ item.setting | upper }}: "{{ item.value }}"
{% endfor %}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: '{{ ansible_operator_meta.name }}-{{ deployment_type }}-configmap'
  namespace: '{{ ansible_operator_meta.namespace }}'
  labels:
    {{ lookup("template", "../common/templates/labels/common.yaml.j2") | indent(width=4) | trim }}
data:
  nginx_default_conf_template: |
    events {
        worker_connections 1024;
    }
    http {
        map $http_x_forwarded_proto $remote_scheme {
            default $http_x_forwarded_proto;
            ''      $scheme;
        }

        include mime.types;
        types {
            application/manifest+json webmanifest;
        }
        server {
            listen 8080;
            {% if not ipv6_disabled %}
            listen [::]:8080;
            {% endif %}

            server_name _;
            server_tokens off;

            access_log off;
            # error_log off;

            autoindex off;

            include mime.types;
            types {
                application/manifest+json webmanifest;
            }

            sendfile on;

            root /usr/share/nginx/html;

            location ~ ^/api/eda {
                proxy_pass http://{{ api_server_name }}:{{ api_nginx_port }};
                proxy_set_header Origin http://{{ api_server_name }}:{{ api_nginx_port }};
                proxy_set_header Host $http_host;
                proxy_set_header X-Forwarded-Proto $remote_scheme;
                proxy_set_header X-Forwarded-Port $server_port;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                # Return 503 Service Unavailable with JSON response if gunicorn fails to respond
                proxy_read_timeout {{ eda_nginx_read_timeout }}s;
                error_page 504 =503 /json_503;
                error_page 502 =503 /json_503;  # Optional, in case gunicorn is completely down    
            }

            location ~* \.(json|woff|woff2|jpe?g|png|gif|ico|svg|css|js)$ {
                add_header Cache-Control "public, max-age=31536000, s-maxage=31536000, immutable";
                try_files $uri =404;
                gzip_static on;
            }

            location / {
                autoindex off;
                expires off;
                add_header Cache-Control "public, max-age=0, s-maxage=0, must-revalidate" always;
                try_files $uri $uri/ /index.html =404;
            }
            location = /json_503 {
              # Custom JSON response for 503 Service Unavailable
              internal;
              add_header Content-Type application/json;
  
              # Check if X-Request-ID is set and include it in the response
              if ($http_x_request_id) {
                  return 503 '{"status": "error", "message": "Service Unavailable", "code": 503, "request_id": "$http_x_request_id"}';
              }
  
              # If X-Request-ID is not set, just return the basic JSON response
              return 503 '{"status": "error", "message": "Service Unavailable", "code": 503}';
          }   
        }
      }
