---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{ lookup("template", "../common/templates/labels/common.yaml.j2")  | indent(width=4) | trim }}
    {{ lookup("template", "../common/templates/labels/version.yaml.j2") | indent(width=4) | trim }}
    app.kubernetes.io/component: '{{ deployment_type }}-webhook'
  name: '{{ event_stream_server_name }}'
  namespace: '{{ ansible_operator_meta.namespace }}'
spec:
  replicas: {{ combined_webhook.replicas }}
{% if combined_webhook.strategy is defined %}
  strategy:
    type: {{ combined_webhook.strategy.type }}
{% if combined_webhook.strategy.type == "Recreate" %}
    rollingUpdate: null
{% elif combined_webhook.strategy.type == "RollingUpdate" %}
    rollingUpdate:
      maxSurge:  {{ combined_webhook.strategy.rollingUpdate.maxSurge | default("25%")}}
      maxUnavailable: {{ combined_webhook.strategy.rollingUpdate.maxUnavailable | default("25%")}}
{% endif %}
{% endif %}
  selector:
    matchLabels:
      app.kubernetes.io/name: '{{ ansible_operator_meta.name }}'
      app.kubernetes.io/managed-by: '{{ deployment_type }}-operator'
      app.kubernetes.io/component: '{{ deployment_type }}-webhook'
  template:
    metadata:
      labels:
        {{ lookup("template", "../common/templates/labels/common.yaml.j2")  | indent(width=8) | trim }}
        {{ lookup("template", "../common/templates/labels/version.yaml.j2") | indent(width=8) | trim }}
        app.kubernetes.io/component: '{{ deployment_type }}-webhook'
      annotations:
        kubectl.kubernetes.io/default-container: 'eda-webhook'
{% for template in [
    "eda-webhook.configmap",
  ] %}
        checksum-{{ template | replace('/', '-') }}: "{{ lookup('template', template + '.yaml.j2') | sha1 }}"
{% endfor %}
{% for secret in [
    "secrets/db_fields_encryption",
  ] %}
        checksum-secret-{{ secret }}: "{{ lookup('ansible.builtin.vars', secret, default='')["resources"][0]["data"] | default('') | sha1 }}"
{% endfor %}
    spec:
      serviceAccountName: '{{ ansible_operator_meta.name }}'
{% if image_pull_secrets | length > 0 %}
      imagePullSecrets:
{% for secret in image_pull_secrets %}
        - name: {{ secret }}
{% endfor %}
{% endif %}
{% if combined_webhook.node_selector is defined %}
      nodeSelector:
        {{ combined_webhook.node_selector | to_nice_yaml | indent(width=8) }}
{% endif %}
{% if combined_webhook.tolerations is defined %}
      tolerations:
        {{ combined_webhook.tolerations | to_nice_yaml | indent(width=8) }}
{% endif %}
{% if combined_webhook.topology_spread_constraints is defined %}
      topologySpreadConstraints:
        {{ combined_webhook.topology_spread_constraints | indent(width=8) }}
{% endif %}
      initContainers:
      - name: wait-for-migrations
        image: {{ _image }}
        imagePullPolicy: '{{ image_pull_policy }}'
        command:
          - /bin/bash
          - -c
          - aap-eda-manage wait_for_migrations -t 60
        envFrom:
          - configMapRef:
              name: '{{ ansible_operator_meta.name }}-{{ deployment_type }}-env-properties'
        env:
        - name: EDA_DB_HOST
          valueFrom:
            secretKeyRef:
              name: '{{ __database_secret }}'
              key: host
        - name: EDA_ACTIVATION_DB_HOST
          valueFrom:
            secretKeyRef:
              name: '{{ __database_secret }}'
              key: host
        - name: EDA_DB_NAME
          valueFrom:
            secretKeyRef:
              name: '{{ __database_secret }}'
              key: database
        - name: EDA_DB_PORT
          valueFrom:
            secretKeyRef:
              name: '{{ __database_secret }}'
              key: port
        - name: EDA_DB_USER
          valueFrom:
            secretKeyRef:
              name: '{{ __database_secret }}'
              key: username
        - name: EDA_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: '{{ __database_secret }}'
              key: password
        - name: EDA_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: '{{ db_fields_encryption_secret_name }}'
              key: secret_key
{% if combined_default_worker.resource_requirements is defined %}
        resources: {{ combined_default_worker.resource_requirements }}
{% endif %}
{% if bundle_ca_crt  %}
      - name: configure-bundle-ca-cert
        image: {{ _image }}
        imagePullPolicy: '{{ image_pull_policy }}'
        command:
          - /bin/sh
          - -c
          - |
            mkdir -p /etc/pki/ca-trust/extracted/{java,pem,openssl,edk2}
            update-ca-trust
{% if combined_webhook.resource_requirements is defined %}
        resources: {{ combined_webhook.resource_requirements }}
{% endif %}
        volumeMounts:
          - name: "ca-trust-extracted"
            mountPath: "/etc/pki/ca-trust/extracted"
          - name: "{{ ansible_operator_meta.name }}-bundle-cacert"
            mountPath: /etc/pki/ca-trust/source/anchors/bundle-ca.crt
            subPath: bundle-ca.crt
            readOnly: true
{% endif %}
      containers:
      - name: eda-webhook
        image: {{ _image }}
        imagePullPolicy: '{{ image_pull_policy }}'
        args:
        - /bin/bash
        - -c
        - gunicorn --bind 0.0.0.0:{{ event_stream_django_port }} --workers {{ combined_webhook.gunicorn_workers }} aap_eda.wsgi:application
        envFrom:
          - configMapRef:
              name: '{{ ansible_operator_meta.name }}-{{ deployment_type }}-env-properties'
        env:
        - name: EDA_DB_HOST
          valueFrom:
            secretKeyRef:
              name: '{{ __database_secret }}'
              key: host
        - name: EDA_ACTIVATION_DB_HOST
          valueFrom:
            secretKeyRef:
              name: '{{ __database_secret }}'
              key: host
        - name: EDA_DB_NAME
          valueFrom:
            secretKeyRef:
              name: '{{ __database_secret }}'
              key: database
        - name: EDA_DB_PORT
          valueFrom:
            secretKeyRef:
              name: '{{ __database_secret }}'
              key: port
        - name: EDA_DB_USER
          valueFrom:
            secretKeyRef:
              name: '{{ __database_secret }}'
              key: username
        - name: EDA_DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: '{{ __database_secret }}'
              key: password
        - name: EDA_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: '{{ db_fields_encryption_secret_name }}'
              key: secret_key
        ports:
        - containerPort: {{ event_stream_django_port }}
        readinessProbe:
          httpGet:
            path: /_healthz
            port: {{ event_stream_django_port }}
          failureThreshold: 10
          periodSeconds: 10
          initialDelaySeconds: 20
        livenessProbe:
          httpGet:
            path: /_healthz
            port: {{ event_stream_django_port }}
          failureThreshold: 10
          periodSeconds: 10
          initialDelaySeconds: 20
{% if combined_webhook.resource_requirements is defined %}
        resources: {{ combined_webhook.resource_requirements }}
{% endif %}
{% if bundle_ca_crt %}
        volumeMounts:
          - name: "ca-trust-extracted"
            mountPath: "/etc/pki/ca-trust/extracted"
          - name: "{{ ansible_operator_meta.name }}-bundle-cacert"
            mountPath: /etc/pki/ca-trust/source/anchors/bundle-ca.crt
            subPath: bundle-ca.crt
            readOnly: true
{% endif %}
      - name: nginx
        image: {{ _image_web }}
        ports:
          - containerPort: {{ event_stream_nginx_port }}
        volumeMounts:
          - name: '{{ ansible_operator_meta.name }}-nginx-webhook-conf'
            mountPath: /etc/nginx/nginx.conf
            subPath: nginx.conf
            readOnly: true
          - name: nginx-cache
            mountPath: /var/cache/nginx
          - name: nginx-run
            mountPath: /var/run
      restartPolicy: Always
      volumes:
        - name: '{{ ansible_operator_meta.name }}-nginx-webhook-conf'
          configMap:
            name: '{{ ansible_operator_meta.name }}-nginx-webhook-configmap'
            items:
              - key: nginx_webhook_default_conf_template
                path: nginx.conf
        - name: nginx-cache
          emptyDir: {}
        - name: nginx-run
          emptyDir: {}
{% if bundle_ca_crt %}
        - name: "ca-trust-extracted"
          emptyDir: {}
        - name: "{{ ansible_operator_meta.name }}-bundle-cacert"
          secret:
            secretName: "{{ bundle_cacert_secret }}"
            items:
              - key: bundle-ca.crt
                path: 'bundle-ca.crt'
{% endif %}
