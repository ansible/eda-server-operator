apiVersion: v1
kind: ConfigMap
metadata:
  name: '{{ ansible_operator_meta.name }}-nginx-event-stream-configmap'
  namespace: '{{ ansible_operator_meta.namespace }}'
data:
  nginx_event_stream_default_conf_template: |
    events {
        worker_connections 1024;
    }
    http {
        map $http_x_forwarded_proto $remote_scheme {
            default $http_x_forwarded_proto;
            ''      $scheme;
        }

        include mime.types;
        types {
            application/manifest+json webmanifest;
        }

        upstream eda-api-event-stream-backend {
            server 127.0.0.1:{{ event_stream_django_port }};
        }

        server {
            listen {{ event_stream_nginx_port }};

            location / {
                proxy_pass              http://eda-api-event-stream-backend/;
                proxy_set_header        Host $host:$server_port;
                proxy_set_header        X-Forwarded-Proto $scheme;
                proxy_set_header        X-Forwarded-Host $host;
                proxy_set_header        X-Forwarded-Port $server_port;
                proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
                # Return 503 Service Unavailable with JSON response if gunicorn fails to respond
                proxy_read_timeout {{ eda_nginx_read_timeout }}s;
                error_page 504 =503 /json_503;
                error_page 502 =503 /json_503;  # Optional, in case gunicorn is completely down    
            }
            location = /json_503 {
                # Custom JSON response for 503 Service Unavailable
                internal;
                add_header Content-Type application/json;
    
                # Check if X-Request-ID is set and include it in the response
                if ($http_x_request_id) {
                    return 503 '{"status": "error", "message": "Service Unavailable", "code": 503, "request_id": "$http_x_request_id"}';
                }
    
                # If X-Request-ID is not set, just return the basic JSON response
                return 503 '{"status": "error", "message": "Service Unavailable", "code": 503}';
            }    
        }
    }
