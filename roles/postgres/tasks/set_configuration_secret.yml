---
# Determine and set postgres configuration secret
- name: Check for specified PostgreSQL configuration
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ database.database_secret }}'
  register: _custom_pg_config_resources
  when:
    - database is defined
    - database | length
    - database.database_secret is defined
    - database.database_secret | length
  no_log: "{{ no_log }}"

- name: Check for default PostgreSQL configuration
  kubernetes.core.k8s_info:
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ ansible_operator_meta.name }}-postgres-configuration'
  register: _default_pg_config_resources
  no_log: "{{ no_log }}"

- name: Set PostgreSQL configuration based on if user secret exists
  set_fact:
    _pg_config: '{{ _custom_pg_config_resources["resources"] | default([]) | length | ternary(_custom_pg_config_resources, _default_pg_config_resources) }}'
  no_log: "{{ no_log }}"

- block:
    - name: Create Database configuration
      kubernetes.core.k8s:
        apply: true
        definition: "{{ lookup('template', 'postgres.secret.yaml.j2') }}"
      no_log: "{{ no_log }}"

    - name: Read Database Configuration
      kubernetes.core.k8s_info:
        kind: Secret
        namespace: '{{ ansible_operator_meta.namespace }}'
        name: '{{ ansible_operator_meta.name }}-postgres-configuration'
      register: _generated_pg_config_resources
      no_log: "{{ no_log }}"
  when: not _pg_config['resources'] | default([]) | length

- name: Set PostgreSQL Configuration
  set_fact:
    pg_config: '{{ _generated_pg_config_resources["resources"] | default([]) | length | ternary(_generated_pg_config_resources, _pg_config) }}'
  no_log: "{{ no_log }}"

- name: Set actual postgres configuration secret used
  set_fact:
    __database_secret: "{{ pg_config['resources'][0]['metadata']['name'] }}"
