---

# It is possible that N-2 postgres pods may still be present in the namespace from previous upgrades.
# So we have to take that into account and preferentially set the most recent one.
- name: Get the old postgres pod (N-1)
  k8s_info:
    kind: Pod
    namespace: "{{ ansible_operator_meta.namespace }}"
    field_selectors:
      - status.phase=Running
  register: _running_pods

- block:
  - name: Filter pods by name
    set_fact:
      filtered_old_postgres_pods: "{{ _running_pods.resources |
        selectattr('metadata.name', 'match', ansible_operator_meta.name + '-postgres.*-0') |
        rejectattr('metadata.name', 'search', '-' + supported_pg_version | string + '-0') |
        list }}"

  # Sort pods by name in reverse order (most recent PG version first) and set
  - name: Set info for previous postgres pod
    set_fact:
      sorted_old_postgres_pods: "{{ filtered_old_postgres_pods |
        sort(attribute='metadata.name') |
        reverse | list }}"
    when: filtered_old_postgres_pods | length

  - name: Set info for previous postgres pod
    set_fact:
      old_postgres_pod: "{{ sorted_old_postgres_pods | first }}"
    when: filtered_old_postgres_pods | length
  when: _running_pods.resources | length

- name: Look up details for this deployment
  k8s_info:
    api_version: "{{ api_version }}"
    kind: "{{ kind }}"
    name: "{{ ansible_operator_meta.name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
  register: this_eda

# If this deployment has been upgraded before or if upgrade has already been started, set this var
- name: Set previous PG version var
  set_fact:
    _previous_upgraded_pg_version: "{{ this_eda['resources'][0]['status']['upgradedPostgresVersion'] | default(false) }}"
  when:
    - "'upgradedPostgresVersion' in this_eda['resources'][0]['status']"

- name: Check if postgres pod is running an older version
  block:
    - name: Set path to PG_VERSION file for given container image
      set_fact:
        path_to_pg_version: '{{ combined_database.postgres_data_path }}/PG_VERSION'

    - name: Get old PostgreSQL version
      k8s_exec:
        namespace: "{{ ansible_operator_meta.namespace }}"
        pod: "{{ old_postgres_pod['metadata']['name'] }}"
        command: |
          bash -c """
          cat {{ path_to_pg_version }}
          """
      register: _old_pg_version

    - debug:
        msg: "--- Upgrading from {{ old_postgres_pod['metadata']['name'] | default('NONE')}} Pod ---"

    - name: Upgrade data dir from old Postgres to {{ supported_pg_version }} if applicable
      include_tasks: upgrade_postgres.yml
      when:
        - (_old_pg_version.stdout | default(0) | int ) < supported_pg_version
  when:
    - managed_database
    - (_previous_upgraded_pg_version | default(false)) | ternary(_previous_upgraded_pg_version | int < supported_pg_version, true)
    - old_postgres_pod | length  # If empty, then old pg pod has been removed and we can assume the upgrade is complete
