---

- name: Set Postgres Configuration Secret name
  set_fact:
    database_secret: "{{ spec['database']['database_secret'] }}"

- name: Check for specified PostgreSQL configuration
  k8s_info:
    kind: Secret
    namespace: '{{ ansible_operator_meta.namespace }}'
    name: '{{ database_secret }}'
  register: pg_config
  no_log: "{{ no_log }}"

- name: Store Database Configuration
  set_fact:
    eda_postgres_user: "{{ pg_config['resources'][0]['data']['username'] | b64decode }}"
    eda_postgres_pass: "{{ pg_config['resources'][0]['data']['password'] | b64decode }}"
    eda_postgres_database: "{{ pg_config['resources'][0]['data']['database'] | b64decode }}"
    eda_postgres_port: "{{ pg_config['resources'][0]['data']['port'] | b64decode }}"
    eda_postgres_host: "{{ pg_config['resources'][0]['data']['host'] | b64decode }}"
    eda_postgres_type: "{{ pg_config['resources'][0]['data']['type'] | b64decode | default('unmanaged') }}"
  no_log: "{{ no_log }}"

- name: Set Default label selector for custom resource generated postgres
  set_fact:
    postgres_label_selector: "app.kubernetes.io/instance=postgres-{{ supported_pg_version }}-{{ deployment_name }}"
  when: postgres_label_selector is not defined

- block:
    - name: Get the postgres pod information
      k8s_info:
        kind: Pod
        namespace: '{{ ansible_operator_meta.namespace }}'
        label_selectors:
          - "{{ postgres_label_selector }}"
      register: postgres_pod
      until:
        - "postgres_pod['resources'] | length"
        - "postgres_pod['resources'][0]['status']['phase'] == 'Running'"
        - "postgres_pod['resources'][0]['status']['containerStatuses'][0]['ready'] == true"
      delay: 5
      retries: 60
    - name: Set the resource pod name as a variable.
      set_fact:
        postgres_pod_name: "{{ postgres_pod['resources'][0]['metadata']['name'] }}"
  when: eda_postgres_type == 'managed'

- name: Check for presence of EDA Deployment
  k8s_info:
    api_version: v1
    kind: Deployment
    name: "{{ deployment_name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
  register: this_deployment

- name: Scale down Deployment for migration
  k8s_scale:
    api_version: v1
    kind: Deployment
    name: "{{ deployment_name }}"
    namespace: "{{ ansible_operator_meta.namespace }}"
    replicas: 0
    wait: yes
  when: this_deployment['resources'] | length

- name: Set full resolvable host name for postgres pod
  set_fact:
    resolvable_db_host: "{{ eda_postgres_host }}.{{ ansible_operator_meta.namespace }}.svc.{{ cluster_name }}"
  no_log: "{{ no_log }}"
  when: eda_postgres_type == 'managed'

- name: Set pg_restore command
  set_fact:
    pg_restore: >-
      pg_restore --clean --if-exists
      -U {{ eda_postgres_user }}
      -h {{ resolvable_db_host }}
      -d {{ eda_postgres_database }}
      -p {{ eda_postgres_port }}
  no_log: "{{ no_log }}"

- name: Restore database dump to the new postgresql container
  k8s_exec:
    namespace: "{{ backup_pvc_namespace }}"
    pod: "{{ ansible_operator_meta.name }}-db-management"
    command: |
      bash -c "
      function end_keepalive {
        rc=$?
        rm -f \"$1\"
        kill $(cat /proc/$2/task/$2/children 2>/dev/null) 2>/dev/null || true
        wait $2 || true
        exit $rc
      }
      keepalive_file=\"$(mktemp)\"
      while [[ -f \"$keepalive_file\" ]]; do
        echo 'Migrating data from old database...'
        sleep 60
      done &
      keepalive_pid=$!
      trap 'end_keepalive \"$keepalive_file\" \"$keepalive_pid\"' EXIT SIGINT SIGTERM
      echo keepalive_pid: $keepalive_pid
      set -e -o pipefail
      cat {{ backup_dir }}/eda.db | PGPASSWORD='{{ eda_postgres_pass }}' {{ pg_restore }}
      echo 'Successful'
      "
  register: data_migration
  no_log: "{{ no_log }}"
  failed_when: "'Successful' not in data_migration.stdout"
